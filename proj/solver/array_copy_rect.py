
min_dim = 1
max_dim = 10

def by_index(i):
    src_data_prev = 'src_data'
    dest_data_prev = 'dest_data'
    if i > 0:
        src_data_prev = 'src_data%d' % (i-1)
        dest_data_prev = 'dest_data%d' % (i-1)
    return (src_data_prev, dest_data_prev)

def main():
    dims = range(min_dim, max_dim+1)

    s = """
/* array_copy_rect.h: copy_rect() / clear_rect() methods of class Array.
   Generated by array_copy_rect.py -- do not hand edit. */
"""
    for clear in [False, True]:
        if not clear:
            s += """
    void copy_rect(Array<real> &dest, const vector<int> &src_start, const vector<int> &dest_start, const vector<int> &extent) const {
        real *src_data = &get_nearest(src_start);
        real *dest_data = &dest.get_nearest(dest_start);
    """
        else:
            s += """
    void clear_rect(const vector<int> &src_start, const vector<int> &extent, real value=0) {
        real *src_data = &get_nearest(src_start);
            """
        s += """
        if (0) { }
"""
        for dim in range(min_dim, max_dim+1):
            s += """        
            else if (sizes.size() == %(dim)d) {
            """ % locals()
            for i in range(dim-1):
                (src_data_prev, dest_data_prev) = by_index(i)
                s += """
                for (int i%(i)d = 0; i%(i)d < extent[%(i)d]; i%(i)d++) {
                    real *src_data%(i)d = %(src_data_prev)s + stride[%(i)d]*i%(i)d;
                    """ % locals()
                if not clear:
                    s += """
                    real *dest_data%(i)d = %(dest_data_prev)s + dest.stride[%(i)d]*i%(i)d;
                    """ % locals()
    
            i = dim-1
            (src_data_prev, dest_data_prev) = by_index(i)
            s += """
                    for (int i%(i)d = 0; i%(i)d < extent[%(i)d]; i%(i)d++) {
                """ % locals()
            if not clear:
                s += """
                        %(dest_data_prev)s[i%(i)d] = %(src_data_prev)s[i%(i)d];
                    }
                """ % locals()
            else:
                s += """
                        %(src_data_prev)s[i%(i)d] = value;
                    }
                """ % locals()
            for i in range(dim-1):
                s += """
                }
                """
            s += """
            }
            """
        s += """
            else { fprintf(stderr, "copy_rect/clear_rect dimension unsupported: %d\\n", sizes.size()); exit(1); }
        }
        """
      
    f = open('array_copy_rect.h', 'wt')
    f.write(s)
    f.close()

if __name__ == '__main__':
    main()

